import re
import csv

include: '../Snakefile'

MOLECULES = get_all_inputs()
METHODS = ['HF']
BASES = ['cc-pVDZ']
STABILITY_ANALYSIS = 'false'

def hf_energy(molecule, method, basis):
    regexp = re.compile(' Total energy in the final basis set = (?P<energy>[-+]?\d+\.\d+)')
    with open(os.path.join(molecule, method, basis, 'mol.out'), 'r') as qchem_out:
        # we are only interested in the last occurrence
        energy = float(re.findall(regexp, qchem_out.read())[-1])
    return energy

def get_up_down(molecule, method, basis):
    """Get up and down electron numbers from QCHEM output file.
     There are        2 alpha and        2 beta electrons
    """

    regexp = re.compile('There are\s+(?P<alpha>\d+) alpha and\s+(?P<beta>\d+) beta electrons')
    with open(os.path.join(molecule, method, basis, 'mol.out'), 'r') as qchem_out:
        for line in qchem_out:
            m = re.search(regexp, line)
            if m:
                neu = int(m.group('alpha'))
                ned = int(m.group('beta'))
    return neu, ned

rule ALL:
    input:
        expand('{molecule}/{method}/{basis}/VMC/10000000/out', molecule=MOLECULES, basis=BASES, method=METHODS),
        expand('{molecule}/{method}/{basis}/VMC_OPT/emin/casl/8_8_44/1000000_9/out', molecule=MOLECULES, basis=BASES, method=METHODS),
        expand('{molecule}/{method}/{basis}/VMC_DMC/emin/casl/8_8_44/tmax_2_1024_1/out', molecule=MOLECULES, basis=BASES, method=METHODS),

rule ALL_VMC_DMC_PLOT:
    input:
        expand('{method}_dmc_energy.dat', method=METHODS),

rule ALL_VMC_DMC:
    input:
        expand('{molecule}/{method}/{basis}/VMC_DMC/emin/casl/8_8_44/tmax_2_1024_1/out', molecule=MOLECULES, basis=BASES, method=METHODS),

rule ALL_VMC_OPT_ENERGY:
    input:
        expand('{molecule}/{method}/{basis}/VMC_OPT/emin/casl/8_8_44/1000000_9/out', molecule=MOLECULES, basis=BASES, method=METHODS),

rule ALL_VMC_OPT:
    input:
        expand('{molecule}/{method}/{basis}/VMC_OPT/emin/casl/8_8_44/10000/out', molecule=MOLECULES, basis=BASES, method=METHODS),

rule ALL_VMC:
    input:
        expand('{molecule}/{method}/{basis}/VMC/10000000/out', molecule=MOLECULES, basis=BASES, method=METHODS),

rule ALL_QCHEM:
    input:
        expand('{molecule}/{method}/{basis}/gwfn.data', molecule=MOLECULES, basis=BASES, method=METHODS),

###################################################################################################################

rule GWFN:
    input:      '{molecule}/{method}/{basis}/mol.molden'
    output:     '{molecule}/{method}/{basis}/gwfn.data'
    run:
        shell('molden2qmc.py 7 "{input}" "{output}"')

pat1 = '======= MOLDEN-FORMATTED INPUT FILE FOLLOWS ======='
pat2 = '======= END OF MOLDEN-FORMATTED INPUT FILE ======='

rule MOLDEN:
    input:      '{molecule}/{method}/{basis}/mol.out'
    output:     '{molecule}/{method}/{basis}/mol.molden'
    params:      pattern='/%(pat1)s/,/%(pat2)s/{/%(pat1)s/!{/%(pat2)s/!p}}' % {'pat1': pat1, 'pat2': pat2}
    shell:      'sed -n "{params.pattern}" "{input}" > "{output}"'

rule QCHEM_RUN:
    input:      '../chem_database/{molecule}.in'
    output:     '{molecule}/{method}/{basis}/mol.out'
    run:
        stability_analysis = STABILITY_ANALYSIS
        input_file = os.path.join(wildcards.molecule, wildcards.method, wildcards.basis, 'mol.in')
        for algorithm in ('diis', 'gdm'):
            method = wildcards.method.split('_')[0]
            # set template
            if method in ('OD', 'OD(2)', 'VOD', 'VOD(2)', 'QCCD', 'QCCD(2)', 'VQCCD'):
                template = 'qchem_multideterminant.tmpl'
            else:
                template = 'qchem.tmpl'
            with open(INPUTS_DIR + '/{molecule}.xyz'.format(molecule=wildcards.molecule), 'r') as f:
                f.readline()                   # skip first line
                molecule_data = f.read()[:-1]  # skip last NL
            with open(input_file, 'w') as f:
                f.write(open(template).read().format(
                    basis=wildcards.basis,
                    method=method,
                    molecule_data=molecule_data,
                    algorithm=algorithm,
                    stability_analysis=stability_analysis
                ))
            shell('qchem -nt 4 "{input_file}" "{output}"')
            if 'Convergence criterion met' in open(output[0]).read():
                break
