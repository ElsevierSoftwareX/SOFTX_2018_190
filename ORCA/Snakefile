import os
import multiprocessing
from datetime import timedelta

PROCS = multiprocessing.cpu_count()

include: '../Snakefile'

STD_ERR = config['STD_ERR']
VMC_NCONFIG = config['VMC_NCONFIG']
MOLECULES = config['MOLECULES']
METHODS = config['METHODS']
BASES = config['BASES']
JASTROWS = config['JASTROWS']


def hf_energy(*path):
    """Get ORCA output energy."""
    regexp = re.compile('FINAL SINGLE POINT ENERGY\s+(?P<energy>[-+]?\d+\.\d+)')
    with open(os.path.join(*path, 'mol.out'), 'r') as orca_out:
        # we are only interested in the last occurrence
        energy = float(re.findall(regexp, orca_out.read())[-1])
    return energy

def hf_time(*path):
    """Get ORCA time."""
    regexp = re.compile('TOTAL RUN TIME: (?P<days>\d+) days (?P<hours>\d+) hours (?P<minutes>\d+) minutes (?P<seconds>\d+) seconds (?P<msec>\d+) msec')
    total_seconds = 0.0
    with open(os.path.join(*path, 'mol.out'), 'r') as orca_out:
        m = list(map(int, re.findall(regexp, orca_out.read())[-1]))
        if m:
            total_seconds = timedelta(days=m[0], hours=m[1], minutes=m[2], seconds=m[3], milliseconds=m[4]).total_seconds()
    return total_seconds

def get_up_down(*path):
    """Get up and down electron numbers from ORCA output file.
    Number of up&down electrons required in CASINO input.
    """

    regexp1 = re.compile('Multiplicity           Mult            ....\s+(?P<mult>\d+)')
    regexp2 = re.compile('Number of Electrons    NEL             ....\s+(?P<elec>\d+)')
    with open(os.path.join(*path, 'mol.out'), 'r') as orca_out:
        for line in orca_out:
            m1 = re.search(regexp1, line)
            if m1:
                mult = int(m1.group('mult'))
            m2 = re.search(regexp2, line)
            if m2:
                elec = int(m2.group('elec'))
    neu = (elec + mult - 1)//2
    ned = (elec - mult + 1)//2
    return neu, ned

def get_nelec(*path):
    """Get total electron numbers from ORCA output file.
    """
    regexp = re.compile('Number of Electrons    NEL             ....\s+(?P<elec>\d+)')
    with open(os.path.join(*path, 'mol.out'), 'r') as orca_out:
        for line in orca_out:
            m = re.search(regexp, line)
            if m:
                elec = int(m.group('elec'))
    return elec

rule ALL:
    input:
        expand('{method}/{basis}/{molecule}/VMC_DMC/emin/{jastrow}/tmax_1_1024_2/out', method=METHODS, basis=BASES, molecule=MOLECULES, jastrow=JASTROWS),
        expand('{method}/{basis}/{molecule}/VMC_DMC/emin/{jastrow}/tmax_2_2048_2/out', method=METHODS, basis=BASES, molecule=MOLECULES, jastrow=JASTROWS),
        expand('{method}/{basis}/{molecule}/VMC_DMC/emin/{jastrow}/tmax_4_4096_2/out', method=METHODS, basis=BASES, molecule=MOLECULES, jastrow=JASTROWS),

rule ALL_VMC_DMC:
    input:
        expand('{method}/{basis}/{molecule}/VMC_DMC/emin/{jastrow}/tmax_1_1024_2/out', method=METHODS, basis=BASES, molecule=MOLECULES, jastrow=JASTROWS),
        expand('{method}/{basis}/{molecule}/VMC_DMC/emin/{jastrow}/tmax_2_2048_2/out', method=METHODS, basis=BASES, molecule=MOLECULES, jastrow=JASTROWS),
        expand('{method}/{basis}/{molecule}/VMC_DMC/emin/{jastrow}/tmax_4_4096_2/out', method=METHODS, basis=BASES, molecule=MOLECULES, jastrow=JASTROWS),

rule ALL_VMC_DMC_BF:
    input:
        expand('{method}/{basis}/{molecule}/VMC_DMC_BF/emin_BF/{jastrow}__9_9_33/tmax_1_1024_2/out', method=METHODS, basis=BASES, molecule=MOLECULES, jastrow=JASTROWS),
        expand('{method}/{basis}/{molecule}/VMC_DMC_BF/emin_BF/{jastrow}__9_9_33/tmax_2_2048_2/out', method=METHODS, basis=BASES, molecule=MOLECULES, jastrow=JASTROWS),
        expand('{method}/{basis}/{molecule}/VMC_DMC_BF/emin_BF/{jastrow}__9_9_33/tmax_4_4096_2/out', method=METHODS, basis=BASES, molecule=MOLECULES, jastrow=JASTROWS),

rule ALL_VMC_OPT_ENERGY:
    input:
        expand('{method}/{basis}/{molecule}/VMC_OPT_ENERGY/emin/{jastrow}/1000000/out', method=METHODS, basis=BASES, molecule=MOLECULES, jastrow=JASTROWS),

rule ALL_VMC_OPT_ENERGY_BF:
    input:
        expand('{method}/{basis}/{molecule}/VMC_OPT_ENERGY_BF/emin_BF/{jastrow}__9_9_33/1000000/out', method=METHODS, basis=BASES, molecule=MOLECULES, jastrow=JASTROWS),

rule ALL_VMC_OPT:
    input:
        expand('{method}/{basis}/{molecule}/VMC_OPT/emin/{jastrow}/out', method=METHODS, basis=BASES, molecule=MOLECULES, jastrow=JASTROWS),

rule ALL_VMC_OPT_BF:
    input:
        expand('{method}/{basis}/{molecule}/VMC_OPT_BF/emin_BF/{jastrow}__9_9_33/out', method=METHODS, basis=BASES, molecule=MOLECULES, jastrow=JASTROWS),

rule ALL_VMC:
    input:
        expand('{method}/{basis}/{molecule}/VMC/10000000/out', method=METHODS, basis=BASES, molecule=MOLECULES),

rule ALL_ORCA:
    input:
        expand('{method}/{basis}/{molecule}/mol.out', method=METHODS, basis=BASES, molecule=MOLECULES),
        expand('{method}/{basis}/{molecule}/mol.out', method='MP2', basis=BASES, molecule=MOLECULES),
        expand('{method}/{basis}/{molecule}/mol.out', method='OO-RI-MP2', basis=BASES, molecule=MOLECULES),
        expand('{method}/{basis}/{molecule}/mol.out', method='OOCCD', basis=BASES, molecule=MOLECULES),
        expand('{method}/{basis}/{molecule}/mol.out', method='DLPNO-CCSD(T)', basis=BASES, molecule=MOLECULES),

#####################################################################################################################

rule MDET:
    input:      '{method}/{basis}/{molecule}/mol.out'
    output:     '{method}/{basis}/{molecule}/correlation.data'
    shell:      'cd "$(dirname "{output}")" && multideterminant.py 3 mol.out'

rule GWFN:
    input:      '{method}/{basis}/{molecule}/mol.molden.input'
    output:     '{method}/{basis}/{molecule}/gwfn.data'
    run:
        # workaround for pseudopotential
        if pp_basis(wildcards.basis):
            shell('molden2qmc.py 3 "{input}" "{output}" --pseudoatoms all')
        else:
            shell('molden2qmc.py 3 "{input}" "{output}"')

rule MOLDEN:
    input:      '{method}/{basis}/{molecule}/mol.out'
    output:     '{method}/{basis}/{molecule}/mol.molden.input'
    run:
        if wildcards.method == 'OO-RI-MP2' and wildcards.molecule != 'h':
            shell("""
                  cd "$(dirname "{output}")"
                  ln -s mol.mp2nat mol.mp2nat.gbw &&
                  $(which orca_2mkl) mol.mp2nat -molden &&
                  ln -s mol.mp2nat.molden.input mol.molden.input""")
        elif wildcards.method == 'OOCCD':
            shell("""
                  cd "$(dirname "{output}")"
                  ln -s mol.mdci.optorb mol.mdci.gbw &&
                  $(which orca_2mkl) mol.mdci -molden &&
                  ln -s mol.mdci.molden.input mol.molden.input""")
        elif wildcards.method.startswith('CASSCF'):
            shell("""
                  cd "$(dirname "{output}")"
                  $(which orca_2mkl) mol_job2 -molden &&
                  ln -s mol_job2.molden.input mol.molden.input""")
        else:
            shell("""
                  cd "$(dirname "{output}")"
                  $(which orca_2mkl) mol -molden""")

rule ORCA_RUN:
    input:      '{path}/mol.inp'
    output:     '{path}/mol.out'
    shell:      'cd "{wildcards.path}" && $(which orca) mol.inp > mol.out'

extra_basis = (
"""%basis
  newGTO H
    "cc-pVQZ"
  end
end""")

rule ORCA_INPUT:
    input:      '../chem_database/{molecule}.xyz'
    output:     '{method}/{basis}/{molecule}/mol.inp'
    run:
        with open(input[0], 'r') as xyz:
            charge, multiplicity = xyz.readlines()[1].split()
        with open(output[0], 'w') as f:
            if wildcards.method.startswith('CASSCF'):
                f.write(open('orca_casscf_mp2.tmpl').read().format(
                    basis=wildcards.basis,
                    method='HF',
                    molecule=wildcards.molecule,
                    charge=charge,
                    multiplicity=multiplicity,
                    nel=wildcards.method[7:-1].split('.')[0],
                    norb=wildcards.method[7:-1].split('.')[1]
                ))
            elif pp_basis(wildcards.basis):
                external_basis = """GTOName = "../../../basis/{}.bas";""".format(wildcards.basis)
                basis = 'cc-pVDZ'
                flag = False
                external_ecp = ''
                with open('ppotential/DiracFock_AREP_gaussian.bas') as ecp:
                    for line in ecp:
                        for symbol in get_atomic_symbols(wildcards.molecule):
                            if line.strip().lower() == 'newecp ' + symbol.lower():
                                flag = True
                        if flag:
                            external_ecp += line
                        if line.startswith('end'):
                            flag = False

                f.write(open('orca_ecp.tmpl').read().format(
                    basis=basis,
                    method=wildcards.method,
                    molecule=wildcards.molecule,
                    charge=charge,
                    multiplicity=multiplicity,
                    external_basis=external_basis,
                    external_ecp=external_ecp
                ))
            elif wildcards.method == 'DLPNO-CCSD(T)':
                f.write(open('orca_dlpno_ccsdt.tmpl').read().format(
                    basis=wildcards.basis,
                    aux_basis='cc-pVQZ/C',
                    extra_basis=extra_basis if wildcards.basis=='cc-pCVQZ' else '',
                    extra_params='! NoFrozenCore' if wildcards.basis=='cc-pCVQZ' else '',
                    method='DLPNO-CCSD(T)',
                    molecule=wildcards.molecule,
                    charge=charge,
                    multiplicity=multiplicity,
                    procs='! PAL{}'.format(PROCS)
                ))
            elif wildcards.method == 'OO-RI-MP2':
                f.write(open('orca_oo_mp2.tmpl').read().format(
                    basis=wildcards.basis,
                    aux_basis=wildcards.basis + '/C',
                    extra_basis=extra_basis if wildcards.basis=='cc-pCVQZ' else '',
                    extra_params='! NoFrozenCore' if wildcards.basis=='cc-pCVQZ' else '',
                    method='OO-RI-MP2',
                    molecule=wildcards.molecule,
                    charge=charge,
                    multiplicity=multiplicity,
                    procs='! PAL{}'.format(PROCS)
                ))
            elif wildcards.method == 'OOCCD':
                f.write(open('orca_oo_ccd.tmpl').read().format(
                    basis=wildcards.basis,
                    aux_basis='cc-pVQZ/C',
                    extra_basis=extra_basis if wildcards.basis=='cc-pCVQZ' else '',
                    extra_params='! NoFrozenCore' if wildcards.basis=='cc-pCVQZ' else '',
                    method='OOCCD',
                    molecule=wildcards.molecule,
                    charge=charge,
                    multiplicity=multiplicity,
                    procs='! PAL{}'.format(PROCS)
                ))
            else:
                f.write(open('orca.tmpl').read().format(
                    basis=wildcards.basis,
                    extra_basis=extra_basis if wildcards.basis=='cc-pCVQZ' else '',
                    extra_params='! NoFrozenCore' if wildcards.basis=='cc-pCVQZ' else '',
                    method=wildcards.method,
                    molecule=wildcards.molecule,
                    charge=charge,
                    multiplicity=multiplicity
                ))
